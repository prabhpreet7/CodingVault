{"version":3,"sources":["logo.svg","Components/Output_Component.js","Components/Codemirror_Component.js","Components/NavbarComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Output_Component","temp","this","props","Output","className","Component","require","defaults","Codemirror_Component","handleSubmit","event","preventDefault","url","state","mode","setState","test_cases","fetch","method","body","JSON","stringify","headers","credentials","then","response","json","data","error","stderr","output","stdout","exitcode","exitCode","code","theme","source_code","iscompiled","e","target","value","console","log","options","lineNumbers","extraKeys","onChange","changeMode","bind","changeTheme","updateCode","editor","onSubmit","type","React","NavbarComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.260ff3c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport './codemirror.css';\r\n\r\n\r\n\r\nclass Output_Component extends Component {\r\n    \r\nrender(){ \r\n     let temp=this.props.Output;\r\n    return (\r\n\r\n        <div className=\"output-container\">\r\n        <h2>Output:</h2>\r\n           <h4>{temp}</h4>\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default Output_Component;","import React, {Component} from 'react';\r\nimport './codemirror.css';\r\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/theme/monokai.css';\r\nimport Output_Component from './Output_Component';\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/javascript/javascript');\r\nrequire('codemirror/addon/hint/anyword-hint.js');\r\nrequire('codemirror/addon/hint/javascript-hint');\r\nrequire('codemirror/addon/hint/show-hint');\r\nrequire('codemirror/mode/python/python');\r\nrequire('codemirror/mode/clike/clike');\r\n\r\n\r\nvar defaults = {\r\n   \tjava: 'public class Simple{  public static void main(String args[]){ //Do  not change class name and dont create another public class   }  } ',\r\n    javascript: 'console.log(\"Hello World\")',\r\n    python:'print(\"Hello World!\")',\r\n};\r\n\r\nclass Codemirror_Component extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: defaults.java,\r\n            theme:'material',\r\n            mode: 'text/x-java',\r\n            source_code:defaults.java,\r\n            test_cases:'\\n',\r\n            output:'',\r\n            error:'',\r\n            iscompiled:true,\r\n            exitcode:0\r\n\r\n        };\r\n      }\r\n    changeMode (e) {\r\n\t\tlet mode = e.target.value;\r\n\t\tthis.setState({\r\n            mode: mode\r\n\t\t});\r\n    }\r\n    changeTheme (e){\r\n        let theme = e.target.value;\r\n\t\tthis.setState({\r\n            theme:theme\r\n\t\t});\r\n    }\r\n    handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      let url=this.state.mode;\r\n      switch (url) {\r\n        case 'python':\r\n          url='/python'\r\n          this.setState({\r\n            test_cases:null\r\n          })\r\n          break;\r\n        case 'text/x-csrc':\r\n          url='/c'\r\n          this.setState({\r\n            test_cases:'\\0'\r\n          })\r\n          break;\r\n        case 'text/x-java':\r\n          url='/java'\r\n          this.setState({\r\n            test_cases:'\\n'\r\n          })\r\n          break;\r\n        case 'text/x-c++src':\r\n          url='/cpp'\r\n          this.setState({\r\n            test_cases:'\\0'\r\n          })\r\n          break;\r\n        default:\r\n          url='/javascript'\r\n          this.setState({\r\n            test_cases:null\r\n          })\r\n      }\r\n     \r\n      fetch( url, {\r\n          method: 'POST',\r\n          // We convert the React state to JSON and send it as the POST body\r\n          body: JSON.stringify(this.state),\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          credentials: 'same-origin'\r\n        }) .then(response => response.json())\r\n        .then(data => \r\n          {\r\n            this.setState({\r\n            error:data.stderr,\r\n            output:data.stdout,\r\n            exitcode:data.exitCode\r\n          \r\n        })});\r\n      \r\n     \r\n  }\r\nrender(){ \r\n   console.log(\"inside codemirror\");\r\n   console.log(this.state.output);\r\n   console.log(this.state.error);\r\n  console.log(this.state.exitcode);\r\n  //  let variable=this.state.error;\r\n  // console.log(this.state.iscompiled)\r\nvar options = {\r\n    lineNumbers: true,\r\n    mode: this.state.mode,\r\n    theme:this.state.theme,\r\n    extraKeys: {\"Ctrl\": \"autocomplete\"}\r\n};\r\nreturn (\r\n<div>\r\n   \r\n  <div >\r\n\t\t\t\t\t<select onChange={this.changeMode.bind(this)} value={this.state.mode}>\r\n            <option value=\"text/x-java\">java</option>\r\n            <option value=\"text/x-csrc\">c</option>\r\n            <option value=\"text/x-c++src\">cpp</option>\r\n            <option value=\"javascript\">JavaScript</option>\r\n            <option value=\"python\">Python</option>\r\n          </select>\r\n          <select onChange={this.changeTheme.bind(this)} value={this.state.theme}>\r\n\t\t\t\t\t\t<option value=\"material\">Material</option>\r\n\t\t\t\t\t\t<option value=\"monokai\">Monokai</option>\r\n          </select>\r\n          <CodeMirror\r\n          value={this.state.code} \r\n          onChange={this.updateCode}\r\n          options={options}\r\n          onChange={(editor, data, value) => {\r\n                  this.setState({\r\n                  source_code:value\r\n          });\r\n              \r\n          }}\r\n          />\r\n  </div>\r\n              <form  onSubmit={this.handleSubmit}>\r\n                <button type=\"submit\" >Submit Code</button>\r\n              </form>\r\n            <div>\r\n             \r\n            <Output_Component  Output={this.state.exitcode ? this.state.error : this.state.output}/>\r\n            </div>\r\n</div>\r\n);}}\r\nexport default Codemirror_Component;","import React, {Component} from 'react';\r\nimport './codemirror.css';\r\n\r\n\r\nclass NavbarComponent extends React.Component {\r\n\r\n    \r\nrender(){ \r\n    return (\r\n        <div>\r\n        <p> This is my online IDE</p>\r\n        </div>\r\n    );\r\n}\r\n}\r\nexport default NavbarComponent;","import React from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css'\nimport Codemirror_Component from './Components/Codemirror_Component';\nimport NavbarComponent from './Components/NavbarComponent';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <NavbarComponent/>\n    <Codemirror_Component/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}